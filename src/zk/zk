#!/usr/bin/python
# -*- coding: utf-8 -*-

import json
from subprocess import Popen

DOCUMENTATION = '''
---
module: zk
short_description: Interact with a Zookeeper ensemble
description:
	- This module interacts with a Zookeeper ensemble.
version_added: "1.2.3"
author: Chris Eineke
requirements:
	- zookeeper-bin package installed
options:
# One or more of the following
	host:
		description:
			- A host to connect to that is part of the Zookeeper ensemble.
    required: True
    default: localhost
    version_added: 1.2.3
	port:
		description:
			- The port of the host to connect to.
		required: True
		default: 2181
		version_added: 1.2.3
	cmd:
		description:
			- The Zookeeper command to execute. One of:
			- get, ls, set, delquota, createpath, stat, listquota, setAcl, getAcl, sync, addauth, delete, setquota
		required: True
		version_added: 1.2.3


'''


EXAMPLES = '''
# example of doing ___ from a playbook
your_module: some_arg=1 other_arg=2
'''

def main():

	module = AnsibleModule(
		argument_spec = dict(
			host = dict(default='localhost', required=False),
			port = dict(default='2181', required=False),
			cmd = dict(required=True),
			path = dict(required=False),
			data = dict(required=False),
			acl = dict(required=False),
			scheme = dict(required=False),
			auth = dict(required=False)
		)
	)

	os.environ['PATH'] += ':/usr/share/zookeeper/bin'

	params = module.params

	host = params['host']
	port = params['port']
	cmd = params['cmd']
	path = params['path']
	data = params['data']
	acl = params['acl']
	scheme = params['scheme']
	auth = params['auth']

	shell_args = [ 'zkCli.sh', '-server', str.join(':', [ host, port ]) ]

	if cmd == 'get':
		shell_args.append('get')
		shell_args.append(path)
	elif cmd == 'ls':
		shell_args.append('ls')
		shell_args.append(path)
	elif cmd == 'set':
		shell_args.append('set')
		shell_args.append(path)
		shell_args.append(data)
	elif cmd == 'rmr':
		shell_args.append('rmr')
		shell_args.append(path)
	elif cmd == 'delquota':
		shell_args.append('delquota')
		shell_args.append(path)
	elif cmd == 'create':
		shell_args.append('create')
		shell_args.append(path)
		shell_args.append(acl)
	elif cmd == 'stat':
		shell_args.append('stat')
		shell_args.append(path)
	elif cmd == 'ls2':
		shell_args.append('ls2')
		shell_args.append(path)
	elif cmd == 'listquota':
		shell_args.append('listquota')
		shell_args.append(path)
	elif cmd == 'setAcl':
		shell_args.append('setAcl')
		shell_args.append(path)
		shell_args.append(acl)
	elif cmd == 'getAcl':
		shell_args.append('getAcl')
		shell_args.append(path)
	elif cmd == 'sync':
		shell_args.append('sync')
		shell_args.append(path)
	elif cmd == 'addauth':
		shell_args.append('addauth')
		shell_args.append(scheme)
		shell_args.append(auth)
	elif cmd == 'delete':
		shell_args.append('delete')
		shell_args.append(path)
	elif cmd == 'setquota':
		shell_args.append('setquota')
		shell_args.append(val)
		shell_args.append(path)
	else:
		module.exit_fail(msg=cmd + ' is not a valid zkCli command')

	zkcli = Popen(shell_args, stdout=subprocess.PIPE)
	zkcli.wait();
	if zkcli.returncode != 0:
		module.exit_fail(msg="Error while executing command: " + shell_args)
	(stdoutdata, stderrdata) = zkcli.communicate()
	stdoutdata = stdoutdata.split('\n')
	if stderrdata != None:
		stderrdata = stderrdata.split('\n')

	if cmd == 'get':
		data = stdoutdata[5]
		changed = False
	elif cmd == 'ls':
		data = stdoutdata[5]
		changed = False
	elif cmd == 'set':
		changed = True
	elif cmd == 'rmr':
		changed = True
	elif cmd == 'delquota':
		changed = True
	elif cmd == 'create':
		changed = True
	elif cmd == 'stat':
		changed = False
	elif cmd == 'ls2':
		changed = False
	elif cmd == 'listquota':
		changed = False
	elif cmd == 'setAcl':
		changed = True
	elif cmd == 'getAcl':
		changed = False
	elif cmd == 'sync':
		changed = False
	elif cmd == 'addauth':
		changed = True
	elif cmd == 'delete':
		changed = True
	elif cmd == 'setquota':
		changed = True

	module.exit_json(
		host = host,
		port = port,
		cmd = cmd,
		path = path,
		data = data,
		acl = acl,
		scheme = scheme,
		auth = auth,
		stdout = stdoutdata,
		stderr = stderrdata,
		changed = changed)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
